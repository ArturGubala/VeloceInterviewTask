@page "/"

@using UserSpying.Client.HttpRepository.Users
@using UserSpying.Client.Models
@using UserSpying.Client.Shared.Components
@using UserSpying.Client.Shared.Dialogs
@using UserSpying.Shared.Models
@using UserSpying.Client.HttpRepository.Genders
@using UserSpying.Client.HttpRepository.Report

@inject IUsersHttpRepository UsersHttpRepository
@inject IGenderHttpRepository GendersHttpRepository
@inject IReportHttpRepository ReportHttpRepository
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudGrid Justify="Justify.Center">
    <MudItem md="12" lg="6" Class="px-8 pt-5">
        <MudTable Items="@CustomUsers" Dense="true" Hover="true" ReadOnly="false" CanCancelEdit="true" Filter="new Func<CustomUser,bool>(FilterFunc)"
                  SortLabel="Sort By" CommitEditTooltip="Zapisz zmiany" RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues"
                  IsEditRowSwitchingBlocked="true" ApplyButtonPosition="TableApplyButtonPosition.End" OnCommitEditClick="ItemHasBeenCommitted"
                  EditButtonPosition="TableEditButtonPosition.End" EditTrigger="TableEditTrigger.RowClick" HeaderClass="customHeader" RowClass="customRow">
            <ToolBarContent>
                <MudButton Class="mr-2" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.PersonAddAlt" Color="Color.Inherit" Size="Size.Small" OnClick="OpenDialog">Dodaj użytkownika</MudButton>
                <MudMenu StartIcon="@Icons.Material.Filled.TextSnippet" EndIcon="@Icons.Material.Filled.KeyboardArrowDown" Label="Generuj raport" Color="Color.Inherit" Variant="Variant.Filled" Size="Size.Small">
                    <MudMenuItem OnClick=@(() => GenerateReport("excel"))>Excel</MudMenuItem>
                    <MudMenuItem OnClick=@(() => GenerateReport("csv"))>Csv</MudMenuItem>
                </MudMenu>
                <MudSpacer />
                <MudTextField @bind-Value="searchString" Placeholder="Wyszukaj" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh></MudTh>
                <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<CustomUser, object>(x => x.FirstName)">Imię</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<CustomUser, object>(x => x.LastName)">Nazwisko</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<CustomUser, object>(x => x.DateOfBirth)">Data urodzenia</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<CustomUser, object>(x => x.Gender.Name)">Płeć</MudTableSortLabel></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>
                    <MudToggleIconButton @bind-Toggled="@context.ShowDetails"
                                         Icon="@Icons.Material.Filled.Visibility" Size="Size.Small" Color="@Color.Inherit" Title="Pokaż szczegóły"
                                         ToggledIcon="@Icons.Material.Filled.VisibilityOff" ToggledSize="Size.Small" ToggledColor="@Color.Inherit" ToggledTitle="Ukryj szczegóły" />
                </MudTd>
                <MudTd DataLabel="Imię">@context.FirstName</MudTd>
                <MudTd DataLabel="Nazwisko">@context.LastName</MudTd>
                <MudTd DataLabel="Data urodzenia">@context.DateOfBirth</MudTd>
                <MudTd DataLabel="Płeć">@context.Gender.Name</MudTd>
            </RowTemplate>
            <RowEditingTemplate>
                <MudTd></MudTd>
                <MudTd DataLabel="Sign">
                    <MudTextField @bind-Value="@context.FirstName" Required MaxLength="50"/>
                </MudTd>
                <MudTd DataLabel="Name">
                    <MudTextField @bind-Value="@context.LastName" Required MaxLength="150"/>
                </MudTd>
                <MudTd DataLabel="Position">
                     <MudDatePicker Label="Data urodzenia" @bind-Date="@context.DateOfBirth" Variant="Variant.Text" Required RequiredError="Musisz podać datę urodzenia"
                                    Validation="@(new Func<DateTime?, string>(ChackDate))" ErrorText="Użytkownik pochodzi z przyszłości? Podaj poprawną datę"></MudDatePicker>
                </MudTd>
                <MudTd DataLabel="Molar mass">
                     <MudSelect @bind-Value="@context.Gender" T="Gender" Label="Płeć" Variant="Variant.Text" AnchorOrigin="Origin.BottomCenter" Dense="true">
                        @foreach (Gender gender in Genders)
                        {
                            <MudSelectItem T="Gender" Value="@gender">@gender.Name</MudSelectItem>
                        }

                    </MudSelect>
                </MudTd>
            </RowEditingTemplate>
            <EditButtonContent Context="button">
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Class="pa-0" OnClick="@button.ButtonAction" Disabled="@button.ButtonDisabled" />
            </EditButtonContent>
            <ChildRowContent>
                @if (context.ShowDetails)
                {
                    <MudTr>
                        <td colspan="6">
                            <MudCard Elevation="0">
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <MudText Typo="Typo.body2">Dodatkowe pola użytkownika <strong>@context.FirstName @context.LastName</strong></MudText>
                                    </CardHeaderContent>
                                </MudCardHeader>
                                <MudCardContent Class="pa-0">
                                    <DetailTable CustomFields="@context.CustomFields.ToList()" />
                                </MudCardContent>
                            </MudCard>
                        </td>
                    </MudTr>
                }
            </ChildRowContent>
         </MudTable>
    </MudItem>
</MudGrid>

<style>
    .customHeader {
        background-color: #4e8074 !important;
    }

    .customRow {
        background-color: #68baa6 !important;
    }

    .mud-table-root .customHeader .mud-table-cell {
        color: #fff;
    }
    </style>

@code {
    List<CustomUser> CustomUsers = new List<CustomUser>();
    List<Gender>? Genders = new List<Gender>();
    private string searchString = "";
    private CustomUser customUserBeforeEdit;
    private int? currentlyEditingUserId;

    protected override async Task OnInitializedAsync()
    {
        var userResponse = await UsersHttpRepository.GetUsersAsync();
        CustomUsers = userResponse.Data.ToList() ?? new List<CustomUser>();

        var genderResponse = await GendersHttpRepository.GetGenders();
        Genders = genderResponse.Data.ToList() ?? new List<Gender>();
    }

    private void BackupItem(object customUser)
    {
        customUserBeforeEdit = new()
        {
            FirstName = ((CustomUser)customUser).FirstName,
            LastName = ((CustomUser)customUser).LastName,
            DateOfBirth = ((CustomUser)customUser).DateOfBirth,
            Gender = ((CustomUser)customUser).Gender
        };

        currentlyEditingUserId = ((CustomUser)customUser).Id;
    }

    private async Task ItemHasBeenCommitted(object customUser)
    {
        CustomUser currentEditUser = CustomUsers.First(u => u.Id == currentlyEditingUserId);
        UpsertUser upsertUser = new UpsertUser()
        {
            FirstName = currentEditUser.FirstName,
            LastName = currentEditUser.LastName,
            DateOfBirth = currentEditUser.DateOfBirth,
            GenderId = currentEditUser.Gender.Id
        };

        Response<int?> response = await UsersHttpRepository.UpdateUserAsync((int)currentlyEditingUserId, upsertUser);
        if (response.Success)
        {
            Snackbar.Add($"Pomyślnie zaktualizowano dane użytkownika {upsertUser.FirstName} {upsertUser.LastName}", Severity.Success);
        }

    }

    private void ResetItemToOriginalValues(object customUser)
    {
        if (customUser == null)
        {
            return;
        }
        ((CustomUser)customUser).FirstName = customUserBeforeEdit.FirstName;
        ((CustomUser)customUser).LastName = customUserBeforeEdit.LastName;
        ((CustomUser)customUser).DateOfBirth = customUserBeforeEdit.DateOfBirth;
        ((CustomUser)customUser).Gender.Name = customUserBeforeEdit.Gender.Name;

        currentlyEditingUserId = null;
    }

    private bool FilterFunc(CustomUser customUser)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (customUser.FirstName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (customUser.LastName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (customUser.Gender.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private async Task OpenDialog()
    {
        var options = new DialogOptions
        {
            FullWidth = true,
            MaxWidth = MaxWidth.Large,
            CloseButton = true,
            DisableBackdropClick = true,
            Position = DialogPosition.Center,
            CloseOnEscapeKey = false,
        };
        var parameters = new DialogParameters<AddUserDialog>();
        parameters.Add<IEnumerable<Gender>>(x => x.Genders, Genders);

        var dialogResult = await DialogService.Show<AddUserDialog>("Dodaj użytkownika", parameters, options).Result;
        var test = (User)dialogResult.Data;
        if (test != null)
        {
            Response<CustomUser?> newUser = await UsersHttpRepository.GetUserAsync(test.Id);
            if (newUser.Data != null)
            {
                CustomUsers.Add(newUser.Data);
                Snackbar.Add($"Pomyślnie dodano użytkownika {newUser.Data.FirstName} {newUser.Data.LastName}", Severity.Success);
                StateHasChanged();
            }
        }
    }

    private async Task GenerateReport(string type)
    {
        await ReportHttpRepository.GenerateReportAsync(type);
    }

    private string ChackDate(DateTime? dateTime)
    {
        if (dateTime > DateTime.Now)
        {
            return "Użytkownik pochodzi z przyszłości? Podaj poprawną datę";
        }
        return "";
    }
}
