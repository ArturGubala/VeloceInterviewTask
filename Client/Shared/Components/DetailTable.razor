@using UserSpying.Shared.Models
@using CustomField = UserSpying.Shared.Models.CustomField
@using UserSpying.Client.HttpRepository.CustomFields

@inject ICustomField CustomFieldHttpRepository
@inject ISnackbar Snackbar

<MudTable Items="@CustomFields" Context="CustomFieldsContext" Hover="true" Breakpoint="Breakpoint.Sm" Elevation="0"
          Dense="true" ReadOnly="false" CanCancelEdit="true" CommitEditTooltip="Zatwierdź zmiany" RowEditPreview="BackupItem" 
          RowEditCancel="ResetItemToOriginalValues" OnCommitEditClick="ItemHasBeenCommitted" IsEditRowSwitchingBlocked="true" 
          ApplyButtonPosition="TableApplyButtonPosition.End" EditButtonPosition="TableEditButtonPosition.End" EditTrigger="TableEditTrigger.RowClick">
    <HeaderContent>
        <MudTh>Nazwa</MudTh>
        <MudTh>Wartość</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Nazwa">@CustomFieldsContext.Name</MudTd>
        <MudTd DataLabel="Wartość">@CustomFieldsContext.Value</MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd DataLabel="Nazwa">
            <MudText>@CustomFieldsContext.Name</MudText>
        </MudTd>
        <MudTd DataLabel="Wartość">
             <MudTextField @bind-Value="@CustomFieldsContext.Value" />
        </MudTd>
    </RowEditingTemplate>
</MudTable>

@code {
    [Parameter] public List<CustomField> CustomFields { get; set; } = new List<CustomField>();
    private CustomField customFieldBeforeEdit;
    private int? currentlyEditingCustomFieldId;

    private void BackupItem(object element)
    {
        customFieldBeforeEdit = new()
        {
            Name = ((CustomField)element).Name,
            Value = ((CustomField)element).Value
        };

        currentlyEditingCustomFieldId = ((CustomField)element).Id;
    }

    private async Task ItemHasBeenCommitted(object element)
    {
        CustomField currentEditCustomField = CustomFields.First(cf => cf.Id == currentlyEditingCustomFieldId);
        UpsertCustomField upsertCustomField = new UpsertCustomField()
        {
            Name = currentEditCustomField.Name,
            Value = currentEditCustomField.Value
        };

        Response<CustomField?> response = await CustomFieldHttpRepository.updateCustomFieldAsync(currentEditCustomField.Id, upsertCustomField);
        if (response.Success)
        {
            Snackbar.Add($"Pomyślnie zaktualizowano wartość pola {currentEditCustomField.Name}", Severity.Success);
        }
    }

    private void ResetItemToOriginalValues(object element)
    {
        ((CustomField)element).Name = customFieldBeforeEdit.Name;
        ((CustomField)element).Value = customFieldBeforeEdit.Value;

        currentlyEditingCustomFieldId = null;
    }
}
