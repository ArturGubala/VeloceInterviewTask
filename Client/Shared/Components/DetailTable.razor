@using UserSpying.Shared.Models

<MudTable Items="@CustomFields" Context="CustomFieldsContext" Hover="true" Breakpoint="Breakpoint.Sm" Elevation="0"
          Dense="true" ReadOnly="false" CanCancelEdit="true" CommitEditTooltip="Commit Edit" RowEditPreview="BackupItem" 
          RowEditCancel="ResetItemToOriginalValues" RowEditCommit="ItemHasBeenCommitted" IsEditRowSwitchingBlocked="true" 
          ApplyButtonPosition="TableApplyButtonPosition.End" EditButtonPosition="TableEditButtonPosition.End" EditTrigger="TableEditTrigger.RowClick">
    <HeaderContent>
        <MudTh>Nazwa</MudTh>
        <MudTh>Wartość</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Nazwa">@CustomFieldsContext.Name</MudTd>
        <MudTd DataLabel="Wartość">@CustomFieldsContext.Value</MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd DataLabel="Sign">
            <MudTextField @bind-Value="@CustomFieldsContext.Name" Required/>
        </MudTd>
        <MudTd DataLabel="Name">
             <MudTextField @bind-Value="@CustomFieldsContext.Value" Required />
        </MudTd>
    </RowEditingTemplate>
</MudTable>

@code {
    [Parameter] public List<CustomField> CustomFields { get; set; } = new List<CustomField>();
    private CustomField customFieldBeforeEdit;

    private void BackupItem(object element)
    {
        customFieldBeforeEdit = new()
        {
            Name = ((CustomField)element).Name,
            Value = ((CustomField)element).Value
        };
    }

    private void ItemHasBeenCommitted(object element)
    {
    // AddEditionEvent($"RowEditCommit event: Changes to Element {((Element)element).Name} committed");
    }

    private void ResetItemToOriginalValues(object element)
    {
        ((CustomField)element).Name = customFieldBeforeEdit.Name;
        ((CustomField)element).Value = customFieldBeforeEdit.Value;
    }
}
